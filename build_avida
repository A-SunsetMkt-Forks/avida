#!/bin/bash

source ${HOME}/.profile
echo ${PATH}


EMSCRIPTEN_APPS=("avida.js" "avida.html" "avida-ed-web")

# This is ugly; thanks sed
# This function adds a line at a particular location
# in a file
# arguments:
#  $1  file path
#  $2  line number for insertion
#  $3  text to insert at line
function add_line(){
   file=$1;
   line=$2;
   text=$3;
   sed -i ".bak" -e "${line}i\\
   ${text}\\
   " ${file}
}

if [ ! -z $1 ] && ( [ $1 == "-h" ] || [ $1 == "--help" ] || [ $1 == "help" ] ); then
   echo "This is the avida build script."
   echo
   echo "Usage: build_avida [action | target] [build-options]"
   echo
   echo "Available actions:"
   echo "   -h --help help    display this message"
   echo "   clean             clean the build system"
   echo "   setup-native      setup but don't build a native target."
   echo "                     This is useful for setting up the build"
   echo "                     system but want to configure some of its"
   echo "                     properties before building the target."
   echo "                     Use \"ccmake ..\" from the created cbuild"
   echo "                     directory to configure build changes."
   echo "                     This option is *not* available for builds"
   echo "                     requiring emscripten."
   echo 
   echo "Available targets (applied when no actions are set):"
   echo "   (none)            build avida without emscripten."
   echo "   avida-js          (Emscripten) Build command-line version"
   echo "                     of commmand line driver."
   echo "   avida-ed-web      (Emscripten) Build the web version of AvidaED"
   echo
   echo "   avida-ed-web-wa   (WebAssembly) Build the web version of AvidaED"
   echo
   echo "build-options are passed directly to the build system."
   exit 0
fi

# Now let's get ready to build
# By first updating our git modules and making
# our cbuild directory
git submodule init
git submodule update

# If we're envoking this from XCode, we get additional
# arguments if not building (e.g. cleaning or rebuilding)
if [ ! -z $1 ] && [ $1 == "clean" ]; then
   rm -rf cbuild
   exit 0
elif [ ! -z $1 ] && \
   ( [ $1 == "install" ] || [ $1 == "installhdrs" ] || [ $1 == "installsrc" ] ); then
   echo "Xcode action $1 is not supported."
   exit 1
fi

mkdir -p cbuild
cd cbuild

# Unfortunately, there is no way to handle switching toolchains inside
# of a CMakeLists.txt file.  It must be done on the commandline.  So,
# instead of having a cmake option, we must use a wrapper script to configure
# the build system for emscripten.
#
# Please note the comments on setting the configuration files below. 
# They *must* be set prior to compilation.
#
# This script requires that the shell environment be aware of emcripten.
# Please use the emscripten sdk ./set_env.sh script to handle this
# configuration.
# @MRR June 2015


if type cmake; then
   echo "cmake found."
else
   echo "cmake was not found."
   if [ -e ${HOME}/.profile ]; then
      echo "Trying to load ${HOME}/.profile for cmake's path."
      source ${HOME}/.profile
   fi
   if ! type cmake; then
      echo "cmake is required to build avida."
      exit 1
   fi
fi


# Decide whether or not to use emscripten's cmake toolchain
# and then build
if [ "$1" == "avida.js" ] || [ "$1" ==  "avida-ed-web" ] || [ "$1" == "avida-ed-web-wa" ]; then
   echo
   echo "-- Configuring for $1 --"
   echo
   echo "Found an emscripten target."
   if [ -z "$EMSCRIPTEN" ]; then
      echo "Emscripten's environment variables are not properly set."
      echo "Attempting to use .profile to add (assuming emsdk_env.sh is called there.)"
      source ~/.profile
      if [ -z "$EMSCRIPTEN" ]; then
         echo "Emscripten's environment variables are still not set."
         echo "Aborting build."
         exit 1
      fi
   fi

   # Emscripten requires us to know in advance where
   # our configuration files are located.
   # Unfortunately, this needs to be *relative* to
   # the build system's internal directory.
   # In this case "../../avida-core/support/config"
   # will point to the default avida configuration files
   # that are usually installed
   # Note that the web-viewer uses it's own configuration
   # scripts, with this value being overriden in the local
   # CMakeLists.txt file for the web-viewer
   if [ -z "${EMS_EMBED_DIR}" ]; then
      EMS_EMBED_DIR="../../avida-core/support/config"
   fi


   em_cmake_flags=" ${@:2} 
       -DEMS_AVIDA_EMBED_DIR=${EMS_EMBED_DIR} 
       -DCMAKE_TOOLCHAIN_FILE=${EMSCRIPTEN}/cmake/Modules/Platform/Emscripten.cmake"
   # Only the viewer or the shell version should be built, exclusively
   if [ "$1" == "avida.js" ]; then
      em_cmake_flags="${em_cmake_flags} -DAVD_CMDLINE=ON -DAVD_HTML=OFF -DAVD_ED=OFF"
   elif [ "$1" == "avida-ed-web" ]; then
      em_cmake_flags="${em_cmake_flags} -DAVD_CMDLINE=OFF -DAVD_HTML=OFF -DAVD_ED=ON"
   elif [ "$1" == "avida-ed-web-wa" ]; then
      em_cmake_flags="${em_cmake_flags} -DAVD_CMDLINE=OFF -DAVD_HTML=OFF -DAVD_ED=ON -DWEB_ASM=ON"
   fi
   echo
   echo
   cmake ${em_cmake_flags} ../

else 
   echo
   echo "-- Configuring for a native build --"
   echo
   cmake "$@" ../
fi

if [ -z $1 ] && [ $1 == "setup-native" ]; then
   echo
   echo
   echo "Native setup complete.  Go to the cbuild directory listed above and use"
   echo "   ccmake .."
   echo "to configure the build setup."
   echo 
   echo "Once configured, the target(s) may be build and installed"
   echo "using the make utility.  For example: "
   echo "   make -j4 install"
   echo "will use 4 compilation threads and install the target output."
   exit 0
fi

# Now that we're all configured, make it and install
make -j10 install
build_exit=$?
if [ "${build_exit}" -ne 0 ]; then
   echo "Build error error ${build_exit}"
   exit $build_exit
fi


# Because of the way relative paths are handled during building, we
# need to make some edits to the avida.js file so it can find the
# configuration files and pre-load them into the virtual file system.
# This post-processing applies to avida.html only at this time.
if [ $? -eq 0 ]; then
   if [ "$1" == "avida.html" ] || [ "$1" == "avida-ed-web" ]; then
      avida_js="work/avida.js"
      sed -i '' "s:\.\.\/\.\.\/bin\/avida.data:/avida.data:g" "${avida_js}" 
   fi
fi

